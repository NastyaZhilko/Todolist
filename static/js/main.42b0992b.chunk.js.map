{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","key","className","isDone","Checkbox","changeTaskStatus","checked","removeTask","Delete","Todolist","removeTodolist","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","map","t","Button","initialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","changeTodolistFilterAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","action","todolist","find","stateCopy","newTask","newTasks","todolistTasks","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.42b0992b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox, ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\n\r\nexport const  AddItemForm = React.memo ((props: AddItemFormPropsType)=> {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField variant={'outlined'}\r\n                   label={'Type value'}\r\n                   value={newTaskTitle}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask} color=\"primary\">\r\n            <AddBox/>\r\n        </IconButton>\r\n\r\n    </div>\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange:(newValue:string)=>void\r\n}\r\n\r\nexport const EditableSpan = React.memo ((props: EditableSpanPropsType)=> {\r\nlet [editMode, setEditMode]=useState(false);\r\nlet [title, setTitle]=useState('');\r\nlet activateEditMode=()=>{\r\n    setEditMode(true);\r\n    setTitle(props.title)\r\n}\r\nlet activateViewMode=()=>{\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n}\r\nlet onChangeTitleHandler=(e:ChangeEvent<HTMLInputElement>)=>setTitle(e.currentTarget.value)\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype  TaskPropsType = {\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todolistId);\r\n\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n\r\n    },[props.task.id,props.changeTaskTitle,props.todolistId])\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : \"\"}>\r\n        <Checkbox\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.isDone}/>\r\n\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from \"react\";\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    filter: FilterValueType\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    },[props.removeTodolist,props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodolistTitle])\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('All', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('Active', props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('Completed', props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = props.tasks.filter(task => task.isDone === false);\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = props.tasks.filter(task => task.isDone === true);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t =>\r\n                        <Task\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        task={t}\r\n                        todolistId={props.id}\r\n                        key={t.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button color={'inherit'} variant={props.filter === 'All' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n\r\n                >All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.filter === 'Active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n\r\n                >Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.filter === 'Completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {FilterValueType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\n//инициализационное значение (если switch не найдет предложенный case, отрисуется иниц. стэйт)\r\nconst initialState: Array<TodolistType>=[]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType>=initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'All'\r\n            },...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n};\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n};\r\n\r\nexport const changeTodolistFilterAC = ( filter: FilterValueType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todolistId, filter}\r\n}\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskACType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskACType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusACType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleACType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ActionType =\r\n    RemoveTaskACType\r\n    | AddTaskACType\r\n    | ChangeTaskStatusACType\r\n    | ChangeTaskTitleACType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let stateCopy = {...state}\r\n            let tasks = state[action.todolistId]\r\n            //const filteredTasks=tasks.filter(t=>t.id!==action.taskId)\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks.map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            return {...state}\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return {...state}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolistId]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string,): RemoveTaskACType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n};\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskACType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusACType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleACType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {AppBar, Button, Container, Grid, IconButton, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\nexport type FilterValueType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    //ф-ия диспатч(используем кух useDispatch из библиотеки React)\r\n    const dispatch = useDispatch();\r\n    //ф-ия селектор (\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\r\n//функции для тасок ниже\r\n    //ф-ия удаления таски\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n\r\n    }, [dispatch])\r\n\r\n    //ф-ия добавления таски\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId))\r\n\r\n    }, [dispatch])\r\n\r\n    //ф-ия изменения статуса таски\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todolistId))\r\n    }, [dispatch])\r\n\r\n    //ф-ия изменения названия таски\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todolistId))\r\n    }, [dispatch])\r\n    //ф-ии для тудулистов ниже\r\n    //ф-ия фильтрация тасок в тудулисте\r\n    const changeFilter = useCallback((value: FilterValueType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(value, todolistId))\r\n    }, [dispatch])\r\n\r\n    //ф-ия удаления тудулиста\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistAC(todolistId))\r\n\r\n    }, [dispatch])\r\n    //ф-ия изменения названия тудулиста\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleAC(id, newTitle))\r\n    }, [dispatch])\r\n\r\n    //ф-ия добавления тудулиста\r\n    //ф-ия useC\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\n//типизация приходит на основании анализа того, что возвращает функция rootReducer\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
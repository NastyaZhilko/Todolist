{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","removeTodolist","Delete","tasks","map","t","key","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId","filteredTasks","tasksObj","setTasks","task","v1","newTasks","changeStatus","taskId","find","todolist","todolists","tl","setTodolists","todolistsId1","todolistsId2","filteredTodolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.570e7996.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox, ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField variant={'outlined'}\r\n                   label={'Type value'}\r\n                   value={newTaskTitle}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask}  color=\"primary\">\r\n            <AddBox/>\r\n        </IconButton>\r\n\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange:(newValue:string)=>void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\nlet [editMode, setEditMode]=useState(false);\r\nlet [title, setTitle]=useState('');\r\nlet activateEditMode=()=>{\r\n    setEditMode(true);\r\n    setTitle(props.title)\r\n}\r\nlet activateViewMode=()=>{\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n}\r\nlet onChangeTitleHandler=(e:ChangeEvent<HTMLInputElement>)=>setTitle(e.currentTarget.value)\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton, Button, Checkbox} from \"@material-ui/core\";\r\nimport {CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle:string) => void\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle:string, todolistId: string) => void\r\n    filter: FilterValueType\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = (newTitle:string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n    const onAllClickHandler = () => props.changeFilter('All', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('Active', props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter('Completed', props.id)\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTask(t.id, props.id)\r\n                        }\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id);\r\n\r\n                        }\r\n                        return <div key={t.id} className={t.isDone ? 'is-done' : \"\"}>\r\n                            <Checkbox\r\n                                   onChange={onChangeStatusHandler}\r\n                                   checked={t.isDone}/>\r\n\r\n                            <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n\r\n                            <IconButton onClick={onRemoveHandler}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button color={'inherit'} variant={props.filter === 'All' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n\r\n                >All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.filter === 'Active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n\r\n                >Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.filter === 'Completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {AppBar, Button, Container, Grid, IconButton, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport type FilterValueType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let filteredTasks = tasks.filter(t => t.id != id);\r\n        tasksObj[todolistId] = filteredTasks\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let tasks = tasksObj[todolistId]\r\n        let newTasks = [task, ...tasks];\r\n        tasksObj[todolistId] = newTasks\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todolistId: string) {\r\n        let tasks = tasksObj[todolistId];\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasksObj});\r\n\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId];\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({...tasksObj});\r\n\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValueType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n\r\n        }\r\n    }\r\n\r\n    let todolistsId1 = v1();\r\n    let todolistsId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistsId1, title: \"What to learn\", filter: 'All'},\r\n        {id: todolistsId2, title: \"What to buy\", filter: 'All'}\r\n    ])\r\n    let removeTodolist = (todolistId: string) => {\r\n        let filteredTodolist = todolists.filter(tl => tl.id !== todolistId)\r\n        setTodolists(filteredTodolist);\r\n        delete tasksObj[todolistId];\r\n        setTasks({...tasksObj})\r\n    }\r\n    let changeTodolistTitle = (id: string, newTitle: string) => {\r\n        const todolist = todolists.find(tl => tl.id === id)\r\n        if (todolist) {\r\n            todolist.title = newTitle;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    let [tasksObj, setTasks] = useState<TasksStateType>({\r\n        [todolistsId1]: [\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: false},\r\n            {id: v1(), title: 'React', isDone: true},\r\n            {id: v1(), title: 'RestApi', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: true}\r\n        ],\r\n        [todolistsId2]: [\r\n            {id: v1(), title: 'Book', isDone: true},\r\n            {id: v1(), title: 'Computer', isDone: false}\r\n        ]\r\n    })\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            filter: 'All',\r\n            title: title\r\n        }\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({\r\n            ...tasksObj, [todolist.id]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let tasksForTodolist = tasksObj[tl.id];\r\n\r\n                            if (tl.filter === 'Active') {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === 'Completed') {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper style={{padding:'10px'}}>\r\n                            <Todolist\r\n                                key={tl.id}\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={tasksForTodolist}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}